{"version":3,"sources":["containers/Home.tsx","containers/ProjectsPage.tsx","components/HeaderBar.tsx","components/FooterBar.tsx","containers/App.tsx","serviceWorker.js","index.tsx"],"names":["Home","jobs","company","tenure","logo_url","website_url","text","href","className","map","value","index","key","job","target","rel","src","alt","id","to","ProjectsPage","HeaderBar","FooterBar","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f32a323.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Home.scss';\n\nconst Home = () => {\n  const skills = [\n    'Ruby','PostgreSQL','Node.js','Vue.js','Nuxt.js','React','Redis','Git',\n    'Elasticsearch','RabbitMQ','Resque','ArchiMate','UML','Docker','CI/CD',\n    'Nginx','PHP','MySQL','Oracle'\n  ]\n\n  const jobs = [\n    {\n      company: 'start.me',\n      tenure: 'dec 2016 - current',\n      logo_url: '/images/logo-startme.png',\n      website_url: 'https://start.me',\n      text: <p>\n        start.me is an online start page/bookmark manager for both individuals and organisations.<br/>\n        As a Senior Web Developer and later Tech Lead, I've worked on numerous front-end, backend and infrastructure-related projects.<br/>\n      </p>\n    },\n    {\n      company: 'Global Sports Media / Perform Group',\n      tenure: 'jan 2010 - nov 2016',\n      logo_url: '/images/logo-perform.svg',\n      website_url: 'https://www.statsperform.com',\n      text: <p>\n        Global Sports Media (GSM) collects and syndicates sports statistics, via a REST api, FTP push service and hosted (white-label) websites and widgets.<br/>\n        After being fully acquired by Perform Group, I've worked, amoung other things, as a Software Architect on a project to introduce a new sports data collection platform.\n      </p>\n    },\n    {\n      company: 'Sport-Track / MyLaps',\n      tenure: 'may 2007 - dec 2009',\n      logo_url: '/images/logo-mylaps.svg',\n      website_url: 'https://www.mylaps.com',\n      text: <p>As a web developer I worked on a back-end portal (PHP), which used an Oracle database. Using this portal, organisers could manage their sports events. Participants use it to register themselves for the purpose of the GPS-based live tracking and tracing system.</p>\n    }\n  ]\n\n  return (\n    <article>\n      <p>\n        Paul Kamer - Full-stack web developer based in The Hague, Netherlands.<br/>\n        Download my CV: <a href=\"/docs/cv.pdf\">Dutch</a> | <a href=\"/docs/cv_en.pdf\">English</a>\n      </p>\n\n      <section className=\"skills\">\n        <h2>Skills</h2>\n        <ul className=\"skills__skillslist\">\n          {skills.map((value, index) => {\n            return <li key={index}>{value}</li>\n          })}\n        </ul>\n      </section>\n\n      <section className=\"jobs\">\n        <h2>Jobs</h2>\n\n        {jobs.map((job, index) => {\n          return <article key={`job_${index}`} className=\"job\">\n            <h3>{job.company}<span className=\"job__tenure\"> - {job.tenure}</span></h3>\n            <section className=\"job__job-details\">\n              <div className=\"job__company-logo\">\n                <a href={job.website_url} target=\"_blank\" rel=\"noopener noreferrer\"><img src={job.logo_url} alt={`${job.company} logo`} /></a>\n              </div>\n              {job.text}\n            </section>\n          </article>\n        })}\n      </section>\n\n      <section>\n        <h2 id=\"projects\">Projects</h2>\n        See <Link to=\"/projects/\">Projects page</Link>\n      </section>\n    </article>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ProjectsPage = () => {\n  return (\n    <section>\n      <nav>\n        <Link to=\"/\">Home</Link> > Projects\n      </nav>\n      <h1>Projects</h1>\n\n      <article>\n        <h2>ClinicalTrials.gov monitor (WIP)</h2>\n\n        <p className=\"intro\">A personal project to receive alerts when clinical trials are updated on clinicaltrials.gov.</p>\n        <p>\n          The clinicaltrials.gov is a website provided by the U.S. National Library of Medicine. It is a database of privately and publicly funded clinical studies conducted around the world.\n        </p>\n        <p>\n          Unfortunately, looking up a particular trail and to determine what it's last changes are takes quite a bit of effort. Personally, I monitor a few dozen trials on a weekly basis, and wanted to automate this process.\n        </p>\n        <p>\n          Luckily, clinicaltrials.gov provides an API, so I've built a \"clinicaltrails monitor\" to receive automatic updates of the trials that I'm interested in. An AWS Lambda function is executed several times per day to\n          check if certain trials (stored in an AWS DynamoDB table) have been updated. The function then determines a diff of the changes last made to the trial record, and emails a summary of all the changes that were found to me.\n        </p>\n\n        <p>This project is still very much work in progress, but the basic functionality is implemented:</p>\n        <ul>\n          <li>A DynamoDB table holds a list of clinical trails that I'm interested in</li>\n          <li>\n            Periodically, a Lambda function is executed to check for updated trials:\n            <ol>\n              <li>When an update is detected, it fetches the latest version of the trial</li>\n              <li>Then, the diff with the previous version is determined</li>\n              <li>The trial in the DynamoDB table is updated</li>\n              <li>A summary email is sent</li>\n            </ol>\n          </li>\n        </ul>\n\n        <p>In the future I intend to make this a public service.</p>\n\n        <h3>Technology</h3>\n        <ul>\n          <li>AWS Lambda</li>\n          <li>NodeJS</li>\n          <li>Serverless Framework in combination with AWS CloudFormation</li>\n          <li>AWS DynamoDB</li>\n        </ul>\n      </article>\n      <hr/>\n      <article>\n        <h2>worldfootball</h2>\n\n        <h3>Technology</h3>\n        <ul>\n          <li>Ruby, Ruby On Rails</li>\n          <li>React: Redux, Jest, server-side rendering</li>\n          <li>AWS (EC2, S3, ElasticSearch)</li>\n          <li>Docker, docker-compose, docker-machine</li>\n          <li>Redis, Resque</li>\n        </ul>\n      </article>\n      <hr/>\n      <article>\n        <h2>Air-Attack</h2>\n\n        <p className=\"intro\">Air-Attack.com was military aviation-related hobby website that I ran for several years.</p>\n\n        <h3>Technology</h3>\n        <ul>\n          <li>Python, Django</li>\n          <li>PHP, Symfony 2</li>\n          <li>MySQL</li>\n          <li>ElasticSearch</li>\n          <li>Apache</li>\n        </ul>\n      </article>\n    </section>\n  );\n}\n\nexport default ProjectsPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './HeaderBar.scss';\n\nconst HeaderBar = () => {\n  return (\n    <header className=\"HeaderBar\">\n        <Link to=\"/\">\n          <img className=\"HeaderBar avatar\" alt=\"avatar\" src=\"/avatar192.jpg\" />\n        </Link>\n        <Link to=\"/\">\n          <h1>Paul Kamer</h1>\n        </Link>\n    </header>\n  );\n}\n\nexport default HeaderBar;\n","import React from 'react';\n\nimport './FooterBar.scss';\n\nconst FooterBar = () => {\n  return (\n    <footer className=\"footerbar\">\n      <a href=\"https://github.com/paulkamer/\" className=\"footerbar__icon\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img src=\"https://unpkg.com/simple-icons@latest/icons/github.svg\" alt=\"Github\" />\n      </a>\n      <a href=\"https://www.linkedin.com/in/paulkamer/\" className=\"footerbar__icon\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img src=\"https://unpkg.com/simple-icons@latest/icons/linkedin.svg\" alt=\"LinkedIn\" />\n      </a>\n      <a href=\"mailto:paulkamer@gmail.com\" className=\"footerbar__icon\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img src=\"/images/mail.svg\" alt=\"email\" />\n      </a> | last updated January 2020\n    </footer>\n  );\n}\n\nexport default FooterBar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch,  Route } from 'react-router-dom';\n\nimport Home from './Home';\nimport ProjectsPage from './ProjectsPage';\nimport HeaderBar from '../components/HeaderBar';\nimport FooterBar from '../components/FooterBar';\n\nimport '../styles/variables.scss';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Router>\n      <HeaderBar/>\n      <main>\n        <Switch>\n          <Route>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/projects/\" component={ProjectsPage} />\n          </Route>\n        </Switch>\n      </main>\n\n      <FooterBar/>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}