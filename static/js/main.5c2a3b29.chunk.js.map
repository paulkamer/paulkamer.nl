{"version":3,"sources":["containers/Home.tsx","components/HeaderBar.tsx","components/FooterBar.tsx","components/Breadcrumbtrail.tsx","containers/ProjectsIndexPage.tsx","components/Screenshots.tsx","containers/projects/ProjectWorldfootballPage.tsx","containers/projects/ProjectTrialmonitorPage.tsx","containers/App.tsx","serviceWorker.js","index.tsx"],"names":["Home","jobs","company","tenure","logo_url","website_url","text","href","className","discipline","skills","map","index","key","skill","si","job","target","rel","src","alt","to","HeaderBar","FooterBar","Breadcrumbtrail","this","props","trail","crumb","label","Component","ProjectsIndexPage","Screenshots","screenshots","screenshot","url","title","wfScreenshots","ProjectWorldfootballPage","ClinicaltrialsmonitorPage","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c2a3b29.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Home.scss';\n\nconst Home = () => {\n  const skills = [\n    {\n      discipline: 'Front-end',\n      skills: ['Vue.js','Nuxt.js','React'],\n    },\n    {\n      discipline: 'Back-end',\n      skills: ['Ruby','Node.js','PHP','RabbitMQ','Resque']\n    },\n    {\n      discipline: 'Databases',\n      skills: ['PostgreSQL', 'Redis','Elasticsearch', 'MySQL','Oracle']\n    },\n    {\n      discipline: 'Infrastructure',\n      skills: ['Docker', 'Nginx', 'Apache', 'AWS', 'Serverless framework']\n    },\n    {\n      discipline: 'Misc',\n      skills: ['Git','UML','CI/CD','ArchiMate']\n    }\n  ];\n\n  const jobs = [\n    {\n      company: 'start.me',\n      tenure: 'dec 2016 - current',\n      logo_url: '/images/logo-startme.png',\n      website_url: 'https://start.me',\n      text: <p>\n        start.me is an online start page/bookmark manager for both individuals and organisations.<br/>\n        As a Senior Web Developer and later Tech Lead, I've worked on numerous front-end, back-end and infrastructure-related projects.<br/>\n      </p>\n    },\n    {\n      company: 'Global Sports Media / Perform Group',\n      tenure: 'jan 2010 - nov 2016',\n      logo_url: '/images/logo-perform.svg',\n      website_url: 'https://www.statsperform.com',\n      text: <p>\n        Global Sports Media (GSM) collects and syndicates sports statistics, via a REST API, FTP push service and hosted (white-label) websites and widgets.<br/>\n        After being fully acquired by Perform Group, I've worked, amoung other things, as a Software Architect on a project to introduce a new sports data collection platform.\n      </p>\n    },\n    {\n      company: 'Sport-Track / MyLaps',\n      tenure: 'may 2007 - dec 2009',\n      logo_url: '/images/logo-mylaps.svg',\n      website_url: 'https://www.mylaps.com',\n      text: <p>As a web developer I worked on a back-end portal (PHP), which used an Oracle database. Using this portal, organisers could manage their sports events. Participants use it to register themselves for the purpose of the GPS-based live tracking and tracing system.</p>\n    }\n  ]\n\n  return (\n    <article>\n      <p>\n        Paul Kamer {'\\u2022'} Full-stack web developer based in The Hague, Netherlands.<br/>\n        Download my CV: <a href=\"/docs/cv.pdf\">Dutch</a> | <a href=\"/docs/cv_en.pdf\">English</a>\n      </p>\n\n      <section className=\"skills\">\n        <h2>Skills</h2>\n        <ul className=\"skills__skillslist\">\n          {\n            skills.map((discipline, index) => {\n              return <li key={`sk_${index}`}>\n                <span className=\"discipline\">{discipline.discipline}:</span>\n                <ul className=\"skills_sublist\">\n                  {\n                    discipline.skills.map((skill, si) =>\n                      <li key={`${index}_${si}`} className=\"skill\">{skill}</li>\n                    )\n                  }\n                </ul>\n              </li>\n            })\n          }\n        </ul>\n      </section>\n\n      <section className=\"jobs\">\n        <h2>Jobs</h2>\n\n        {jobs.map((job, index) => {\n          return <article key={`job_${index}`} className=\"job\">\n            <h3>{job.company}<span className=\"job__tenure\"> - {job.tenure}</span></h3>\n            <section className=\"job__job-details\">\n              <div className=\"job__company-logo\">\n                <a href={job.website_url} target=\"_blank\" rel=\"noopener noreferrer\"><img src={job.logo_url} alt={`${job.company} logo`} /></a>\n              </div>\n              {job.text}\n            </section>\n          </article>\n        })}\n      </section>\n\n      <section className=\"projects\">\n        <h2 >Projects</h2>\n        For an impression of personal projects I worked on, see the <Link to=\"/projects/\">Projects page</Link>.\n      </section>\n    </article>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './HeaderBar.scss';\n\nconst HeaderBar = () => {\n  return (\n    <header className=\"HeaderBar\">\n      <div className=\"HeaderBar__container\">\n        <div className=\"HeaderBar__name\">\n          <Link to=\"/\">\n              <img className=\"HeaderBar avatar\" alt=\"avatar\" src=\"/avatar192.jpg\" />\n            </Link>\n            <Link to=\"/\">\n              <h1>Paul Kamer</h1>\n            </Link>\n        </div>\n\n        <div className=\"HeaderBar__menu\">\n          <ul>\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link to=\"/projects/\">Projects</Link></li>\n          </ul>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default HeaderBar;\n","import React from 'react';\n\nimport './FooterBar.scss';\n\nconst FooterBar = () => {\n  return (\n    <footer className=\"footerbar\">\n      <a href=\"https://github.com/paulkamer/\" className=\"footerbar__icon\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img src=\"https://unpkg.com/simple-icons@latest/icons/github.svg\" alt=\"Github\" />\n      </a>\n      <a href=\"https://www.linkedin.com/in/paulkamer/\" className=\"footerbar__icon\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img src=\"https://unpkg.com/simple-icons@latest/icons/linkedin.svg\" alt=\"LinkedIn\" />\n      </a>\n      <a href=\"mailto:paulkamer@gmail.com\" className=\"footerbar__icon\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img src=\"/images/mail.svg\" alt=\"email\" />\n      </a> | last updated January 2020\n    </footer>\n  );\n}\n\nexport default FooterBar;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Breadcrumbtrail.scss';\n\ntype BreadCrumb = {\n  label: string;\n  to?: string;\n}\n\nexport interface BreadcrumbtrailProps { trail: BreadCrumb[]; }\n\nexport class Breadcrumbtrail extends Component<BreadcrumbtrailProps> {\n  render() {\n    return (\n      <nav className=\"breadcrumbtrail\">\n        <ul>\n          <li><Link to=\"/\">Home</Link></li>\n          {\n            this.props.trail.map((crumb, index) =>\n              <li key={`breadcrumb_${index}`}>{crumb.to ? <Link to={crumb.to}>{crumb.label}</Link> : crumb.label}</li>\n            )\n          }\n        </ul>\n      </nav>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Breadcrumbtrail } from '../components/Breadcrumbtrail'\n\nconst ProjectsIndexPage = () => {\n  return (\n    <section>\n      <Breadcrumbtrail trail={[{ label: 'Projects' }]} />\n      <h1>Projects</h1>\n\n      <article>\n        <h2>ClinicalTrials.gov monitor</h2>\n\n        <p>\n          A service to receive notifications about updated clinical trials on ClinicalTrials.gov.<br/>\n          For a full description, click <Link to=\"/projects/trialmonitor/\">here</Link>.\n        </p>\n      </article>\n\n      <article>\n        <h2>Worldfootball</h2>\n\n        <p>\n          A football results and statistics website, written in React and Ruby. Read <Link to=\"/projects/worldfootball/\">more</Link>.\n        </p>\n      </article>\n\n      <article>\n        <h2>Air-Attack</h2>\n\n        <p>\n          Air-Attack was military aviation-related hobby website that I ran for several years.*<br/>\n        </p>\n\n        <h3>Technology</h3>\n        <ul>\n          <li>Front-end: PHP, Symfony 2, Apache</li>\n          <li>Back-end: Python, Django</li>\n          <li>Infrastructure: Amazon EC2</li>\n          <li>DB & Search: MySQL, ElasticSearch</li>\n        </ul>\n      </article>\n\n      <footer className=\"footnotes\">*The domain has since been taken over by spammers it seems.</footer>\n    </section>\n  );\n}\n\nexport default ProjectsIndexPage;\n","import React, { Component } from 'react';\n\nimport './Screenshots.scss';\n\ntype Screenshot = {\n  alt: string;\n  url: string;\n  title?: string;\n}\n\nexport interface ScreenshotsProps { screenshots: Screenshot[]; }\n\nexport class Screenshots extends Component<ScreenshotsProps> {\n  render() {\n    return (\n      <div className=\"screenshots\">\n        {\n          this.props.screenshots.map((screenshot, index) =>\n            <div key={`screenshot_${index}`} className=\"screenshots__screenshot\">\n              <a\n                href={screenshot.url}\n                target=\"_blank\"\n                title={`${screenshot.title || screenshot.alt} - click to expand`}\n                rel=\"noopener noreferrer\"\n              >\n                <img src={screenshot.url} alt={screenshot.alt} />\n              </a>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { Breadcrumbtrail } from '../../components/Breadcrumbtrail'\nimport { Screenshots } from '../../components/Screenshots'\n\nconst wfScreenshots = [\n  {\n    url: '/images/projects/worldfootball/homepage.png',\n    alt: 'Homepage',\n    title: 'Worldfootball.com homepage',\n  },\n  {\n    url: '/images/projects/worldfootball/teampage.png',\n    alt: 'Team page',\n    title: 'Worldfootball.com team page',\n  },\n  {\n    url: '/images/projects/worldfootball/matchpage.png',\n    alt: 'Match page',\n    title: 'Match page (2018 World Cup Final)',\n  },\n  {\n    url: '/images/projects/worldfootball/leaguetable.png',\n    alt: 'League table',\n    title: 'Worldfootball.com League table',\n  },\n]\n\nconst ProjectWorldfootballPage = () => {\n  return (\n    <section>\n      <Breadcrumbtrail trail={[{ to: '/projects/', label: 'Projects' }, { label: 'Worldfootball' }]} />\n\n      <h1>Worldfootball</h1>\n\n      <h3>Screenshots</h3>\n      <Screenshots screenshots={wfScreenshots}/>\n\n      <h3>Technology</h3>\n        <p>\n          Live results and post-match stats were synced by <a href=\"https://github.com/resque/resque\" target=\"_blank\" rel=\"noopener noreferrer\">Resque</a>-backed background jobs (written in Ruby) from the <a href=\"https://datasportsgroup.com/\" target=\"_blank\" rel=\"noopener noreferrer\">datasportsgroup</a> API.<br/>\n          - images S3\n          - active cache invalidations using Cloudflare API\n          - all data searchable, using ElasticSearch\n          - widget generator/configurator\n        </p>\n\n        <h4>Technology</h4>\n        <ul>\n          <li>Front-end:\n            <ul>\n              <li>React (incl. Redux, Jest)</li>\n              <li>Sass (SCSS)</li>\n              <li>Babel, ESLint</li>\n              <li>Pages are served by Express.js (including server-side rendering)</li>\n            </ul>\n          </li>\n          <li>Back-end:\n            <ul>\n              <li>API: Ruby on Rails</li>\n              <li>Background jobs: Ruby, Resque, Redis</li>\n            </ul>\n          </li>\n          <li>Infrastructure:\n            <ul>\n              <li>AWS: EC2, S3, ElasticSearch</li>\n              <li>Docker, docker-compose, docker-machine</li>\n            </ul>\n          </li>\n        </ul>\n    </section>\n  );\n}\n\nexport default ProjectWorldfootballPage;\n","import React from 'react';\n\nimport { Breadcrumbtrail } from '../../components/Breadcrumbtrail'\n\nconst ClinicaltrialsmonitorPage = () => {\n  return (\n    <section>\n      <Breadcrumbtrail trail={[{ to: '/projects/', label: 'Projects' }, { label: 'ClinicalTrials monitor' }]} />\n\n      <h1>ClinicalTrials monitor</h1>\n\n      <p className=\"intro\">A personal project to receive alerts when clinical trials are updated on clinicaltrials.gov.</p>\n        <p>\n          The <a href=\"https://clinicaltrials.gov/\" target=\"_blank\" rel=\"noopener noreferrer\">clinicaltrials.gov</a> is a website provided by the U.S. National Library of Medicine. It is a database of privately and publicly funded clinical studies conducted around the world.\n        </p>\n        <p>\n          Unfortunately, looking up a particular trail and to determine what it's last changes are takes quite a bit of effort. Personally, I monitor a few dozen trials on a weekly basis, so wanted to automate this process.\n        </p>\n        <p>\n          Luckily, clinicaltrials.gov provides an API, so I've built a \"clinicaltrails monitor\" to receive automatic updates of the trials that I'm interested in. An AWS Lambda function is executed several times per day to\n          check if certain trials (stored in an AWS DynamoDB table) have been updated. Then, a diff of the changed trial records is determined, and a notification email is sent.\n        </p>\n\n        <p>This project is still work in progress, but the basic functionality is implemented:</p>\n        <ul>\n          <li>A DynamoDB table holds a list of clinical trails to monitor</li>\n          <li>A Lambda function is periodically executed to check for updated trials</li>\n          <li>\n            For each updated trial, a follow-up Lambda function is triggered, to:\n            <ol>\n              <li>Fetch the full trial record and update the record in DynamoDB</li>\n              <li>Determine the diff between the previous and latest version of the trial</li>\n            </ol>\n          </li>\n          <li>\n            Once all trial records have been updated, another Lambda function is triggered, to:\n            <ol>\n              <li>Format a summary of all detected changes</li>\n              <li>Send the summary as an email</li>\n            </ol>\n          </li>\n        </ul>\n\n        <p/>\n        <p>\n          In the future I intend to make this a publicly-available service.\n        </p>\n\n        <h3>Technology</h3>\n        <ul>\n          <li><a href=\"https://aws.amazon.com/lambda/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Lambda</a> functions, written in <a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js</a></li>\n          <li><a href=\"https://serverless.com\" target=\"_blank\" rel=\"noopener noreferrer\">Serverless Framework</a> in combination with <a href=\"https://aws.amazon.com/cloudformation/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS CloudFormation</a></li>\n          <li><a href=\"https://aws.amazon.com/dynamodb/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS DynamoDB</a></li>\n        </ul>\n    </section>\n  );\n}\n\nexport default ClinicaltrialsmonitorPage;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch,  Route } from 'react-router-dom';\n\nimport Home from './Home';\nimport HeaderBar from '../components/HeaderBar';\nimport FooterBar from '../components/FooterBar';\n\nimport ProjectsIndexPage from './ProjectsIndexPage';\nimport ProjectWorldfootballPage from './projects/ProjectWorldfootballPage';\nimport ClinicaltrialsmonitorPage from './projects/ProjectTrialmonitorPage';\n\n\nimport '../styles/variables.scss';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Router>\n      <HeaderBar/>\n      <main className=\"app-main\">\n        <Switch>\n          <Route>\n            <Route exact path=\"/\" component={Home} />\n\n            <div className=\"page-container\">\n              <Route exact path=\"/projects/worldfootball/\" component={ProjectWorldfootballPage} />\n              <Route exact path=\"/projects/trialmonitor/\" component={ClinicaltrialsmonitorPage} />\n              <Route exact path=\"/projects/\" component={ProjectsIndexPage} />\n            </div>\n          </Route>\n        </Switch>\n      </main>\n\n      <FooterBar/>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}